import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as a,b as r,o as i}from"./app-BnAZYMcT.js";const s="/assets/2024-02-25-01-DXHxd910.jpg",o={};function d(p,e){return i(),n("div",null,[e[0]||(e[0]=a('<h1 id="鍵盤掃描碼" tabindex="-1"><a class="header-anchor" href="#鍵盤掃描碼"><span>鍵盤掃描碼</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>本文主要探討 <code>keybd_event</code> 函式，<br> 坊間許多的按鍵精靈都會有相關的範例。<br> 由於 <code>keybd_event</code> 比起其他 <code>SendMessage</code>、<code>PostMessage</code> 等函式更為底層，<br> 所以在撰寫上都比較推薦用 <code>keybd_event</code> 來做鍵盤訊號的模擬。</p>',3)),r(" more "),e[1]||(e[1]=a(`<h2 id="鍵盤虛擬碼與鍵盤掃描碼" tabindex="-1"><a class="header-anchor" href="#鍵盤虛擬碼與鍵盤掃描碼"><span>鍵盤虛擬碼與鍵盤掃描碼</span></a></h2><p>當參考官方文件 <a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-keybd_event" target="_blank" rel="noopener noreferrer">keybd_event函式 (winuser.h)</a> 時會看到語法如下</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> keybd_event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] BYTE      bVk,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [in] BYTE      bScan,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [in] DWORD     dwFlags,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [in] ULONG_PTR dwExtraInfo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bVk 是鍵盤虛擬碼<br> bScan 是鍵盤掃描碼<br> dwFlags 控制函式作業的各種層面。 此參數可以是下列一或多個值。</p><table><thead><tr><th>值</th><th>意義</th></tr></thead><tbody><tr><td>KEYEVENTF_EXTENDEDKEY 0x0001</td><td>如果指定，掃描碼前面會加上前置詞位元組。</td></tr><tr><td>KEYEVENTF_KEYUP 0x0002</td><td>如果指定，則會釋放掃描碼訊號。如果未指定，按鍵持續按下。</td></tr></tbody></table><p>一般的按鍵腳本通常用鍵盤虛擬碼就可以起作用<br> 所以許多網路上的教學都使用 <code>System.Windows.Forms</code> 的 <code>Keys</code> 列舉傳入 <code>bVk</code><br> 然後 <code>bScan</code> 都直接說傳入 0 即可。</p><p>事實上也不能說是錯的，因為許多電腦應用程式是可以生效的，<br> 但對於一些遊戲，如果沒有傳入掃描碼不會有作用，<br> 原因是有些遊戲接收的訊號是硬體訊號，<br> 特別是跨平台或以家機為主開發的遊戲。</p><h2 id="鍵盤掃描碼與鍵盤驅動的關係" tabindex="-1"><a class="header-anchor" href="#鍵盤掃描碼與鍵盤驅動的關係"><span>鍵盤掃描碼與鍵盤驅動的關係</span></a></h2><p>那麼為什麼要這麼麻煩分成兩個呢？</p><p>由於歷史因素，各家生產的鍵盤的硬體訊號會有不同，<br> 像是以前的鍵盤是 PS/2 規格的。<br><img src="`+s+'" alt="現在看過的都是老人了" loading="lazy"></p><p>但作業系統不可能知道所有鍵盤的訊號，<br> 所以需要鍵盤驅動來做轉換，<br> 順序大致如下：</p><ol><li>使用者按下鍵盤的某個按鍵</li><li>鍵盤控制器發送硬體訊號到作業系統，這裡的硬體訊號就是掃描碼</li><li>掃描碼輸入到作業系統</li><li>作業系統接收到掃描碼</li><li>作業系統轉發掃描碼到鍵盤驅動</li><li>鍵盤驅動轉換為鍵盤虛擬碼</li></ol><h2 id="鍵盤掃描碼怎麼查" tabindex="-1"><a class="header-anchor" href="#鍵盤掃描碼怎麼查"><span>鍵盤掃描碼怎麼查</span></a></h2><p>還好經歷時代洪流，那些神奇規格的鍵盤都死得差不多了。</p><p>目前主流電腦鍵盤按鍵沿用 IBM 的行列矩陣方式佈局排列，稱為掃描矩陣。<br> 可以用 <a href="https://wiki.osdev.org/PS/2_Keyboard" target="_blank" rel="noopener noreferrer">掃描碼對照表</a> 來參考。</p><h2 id="結論" tabindex="-1"><a class="header-anchor" href="#結論"><span>結論</span></a></h2><p>坊間的網路教學都說 <code>bScan</code> 都傳入 0 即可。<br> 但知道了掃描碼的由來與作用，<br> 這邊還是建議撰寫時可以傳入對應的數值。</p><h2 id="參考資料" tabindex="-1"><a class="header-anchor" href="#參考資料"><span>參考資料</span></a></h2><p><a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-keybd_event" target="_blank" rel="noopener noreferrer">keybd_event 函式 (winuser.h)</a><br><a href="https://learn.microsoft.com/zh-tw/windows/win32/inputdev/virtual-key-codes" target="_blank" rel="noopener noreferrer">虛擬按鍵代碼</a><br><a href="https://learn.microsoft.com/zh-tw/windows/win32/inputdev/about-keyboard-input" target="_blank" rel="noopener noreferrer">鍵盤輸入概觀</a><br><a href="https://www.typeboom.com/archives/53/" target="_blank" rel="noopener noreferrer">电脑键盘工作原理</a><br><a href="https://wiki.osdev.org/PS/2_Keyboard" target="_blank" rel="noopener noreferrer">PS/2 Keyboard</a></p>',19))])}const h=t(o,[["render",d]]),b=JSON.parse('{"path":"/posts/2024-02-25-keyboard-scan-code/","title":"淺談鍵盤掃描碼","lang":"zh-TW","frontmatter":{"title":"淺談鍵盤掃描碼","description":"淺談鍵盤掃描碼","date":"2024-01-16T00:00:00.000Z","category":"外掛開發","tag":["外掛","按鍵精靈","鍵盤腳本"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"淺談鍵盤掃描碼\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-29T17:19:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Pamis Wang\\",\\"url\\":\\"https://pamis.dev\\",\\"email\\":\\"pamis.wang@gmail.com\\"}]}"],["meta",{"property":"og:url","content":"https://pamis.dev/posts/2024-02-25-keyboard-scan-code/"}],["meta",{"property":"og:site_name","content":"Pamis Blog"}],["meta",{"property":"og:title","content":"淺談鍵盤掃描碼"}],["meta",{"property":"og:description","content":"淺談鍵盤掃描碼"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-TW"}],["meta",{"property":"og:updated_time","content":"2024-04-29T17:19:49.000Z"}],["meta",{"property":"article:tag","content":"鍵盤腳本"}],["meta",{"property":"article:tag","content":"按鍵精靈"}],["meta",{"property":"article:tag","content":"外掛"}],["meta",{"property":"article:published_time","content":"2024-01-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-29T17:19:49.000Z"}]]},"git":{"createdTime":1708864407000,"updatedTime":1714411189000,"contributors":[{"name":"Pamis Wang","username":"","email":"pamis1116@gmail.com","commits":3}]},"readingTime":{"minutes":2.53,"words":758},"filePathRelative":"posts/2024-02-25-keyboard-scan-code/index.md","excerpt":"\\n<h2>前言</h2>\\n<p>本文主要探討 <code>keybd_event</code> 函式，<br>\\n坊間許多的按鍵精靈都會有相關的範例。<br>\\n由於 <code>keybd_event</code> 比起其他 <code>SendMessage</code>、<code>PostMessage</code> 等函式更為底層，<br>\\n所以在撰寫上都比較推薦用 <code>keybd_event</code> 來做鍵盤訊號的模擬。</p>\\n"}');export{h as comp,b as data};
